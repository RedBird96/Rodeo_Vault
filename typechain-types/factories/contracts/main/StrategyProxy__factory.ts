/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  StrategyProxy,
  StrategyProxyInterface,
} from "../../../contracts/main/StrategyProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_admin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dummyImplementation",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    name: "removeImplementationLog",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldAdmin_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin_",
        type: "address",
      },
    ],
    name: "setAdminLog",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "oldDummyImplementation_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newDummyImplementation_",
        type: "address",
      },
    ],
    name: "setDummyImplementationLog",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes4[]",
        name: "sigs_",
        type: "bytes4[]",
      },
    ],
    name: "setImplementationLog",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
      {
        internalType: "bytes4[]",
        name: "sigs_",
        type: "bytes4[]",
      },
    ],
    name: "addImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAdmin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDummyImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "impl_",
        type: "address",
      },
    ],
    name: "getImplementationSigs",
    outputs: [
      {
        internalType: "bytes4[]",
        name: "",
        type: "bytes4[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "sig_",
        type: "bytes4",
      },
    ],
    name: "getSigsImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    name: "removeImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin_",
        type: "address",
      },
    ],
    name: "setAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newDummyImplementation_",
        type: "address",
      },
    ],
    name: "setDummyImplementation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "";

type StrategyProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StrategyProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StrategyProxy__factory extends ContractFactory {
  constructor(...args: StrategyProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _admin: PromiseOrValue<string>,
    _dummyImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<StrategyProxy> {
    return super.deploy(
      _admin,
      _dummyImplementation,
      overrides || {}
    ) as Promise<StrategyProxy>;
  }
  override getDeployTransaction(
    _admin: PromiseOrValue<string>,
    _dummyImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _admin,
      _dummyImplementation,
      overrides || {}
    );
  }
  override attach(address: string): StrategyProxy {
    return super.attach(address) as StrategyProxy;
  }
  override connect(signer: Signer): StrategyProxy__factory {
    return super.connect(signer) as StrategyProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StrategyProxyInterface {
    return new utils.Interface(_abi) as StrategyProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StrategyProxy {
    return new Contract(address, _abi, signerOrProvider) as StrategyProxy;
  }
}
