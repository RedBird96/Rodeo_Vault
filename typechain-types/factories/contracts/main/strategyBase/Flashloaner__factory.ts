/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  Flashloaner,
  FlashloanerInterface,
} from "../../../../contracts/main/strategyBase/Flashloaner";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "onFlashLoanOne",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_initiator",
        type: "address",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_fee",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_params",
        type: "bytes",
      },
    ],
    name: "onFlashLoanTwo",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061015f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806304e0a6551461003b578063af8658ab1461003b575b600080fd5b610055610049366004610083565b60009695505050505050565b60405190815260200160405180910390f35b80356001600160a01b038116811461007e57600080fd5b919050565b60008060008060008060a0878903121561009c57600080fd5b6100a587610067565b95506100b360208801610067565b94506040870135935060608701359250608087013567ffffffffffffffff808211156100de57600080fd5b818901915089601f8301126100f257600080fd5b81358181111561010157600080fd5b8a602082850101111561011357600080fd5b602083019450809350505050929550929550929556fea2646970667358221220ef3d96e44720ab7ff35481b91e40550d3938e8ebf4bd622f107d0567cc67177864736f6c63430008130033";

type FlashloanerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FlashloanerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Flashloaner__factory extends ContractFactory {
  constructor(...args: FlashloanerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Flashloaner> {
    return super.deploy(overrides || {}) as Promise<Flashloaner>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Flashloaner {
    return super.attach(address) as Flashloaner;
  }
  override connect(signer: Signer): Flashloaner__factory {
    return super.connect(signer) as Flashloaner__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FlashloanerInterface {
    return new utils.Interface(_abi) as FlashloanerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Flashloaner {
    return new Contract(address, _abi, signerOrProvider) as Flashloaner;
  }
}
