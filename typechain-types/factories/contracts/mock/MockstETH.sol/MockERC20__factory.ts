/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../../contracts/mock/MockstETH.sol/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "_decimals",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "guy",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "usr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "src",
        type: "address",
      },
      {
        internalType: "address",
        name: "dst",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amt",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0604052600a60a09081526909adec6d640e6e88aa8960b31b60c0526000906200002b90826200015b565b506040805180820190915260068152650dae6e88aa8960d31b60208201526001906200005890826200015b565b503480156200006657600080fd5b5060405162000d0d38038062000d0d8339810160408190526200008991620002d6565b60006200009784826200015b565b506001620000a683826200015b565b5060ff16608052506200035b9050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000e157607f821691505b6020821081036200010257634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200015657600081815260208120601f850160051c81016020861015620001315750805b601f850160051c820191505b8181101562000152578281556001016200013d565b5050505b505050565b81516001600160401b03811115620001775762000177620000b6565b6200018f81620001888454620000cc565b8462000108565b602080601f831160018114620001c75760008415620001ae5750858301515b600019600386901b1c1916600185901b17855562000152565b600085815260208120601f198616915b82811015620001f857888601518255948401946001909101908401620001d7565b5085821015620002175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600082601f8301126200023957600080fd5b81516001600160401b0380821115620002565762000256620000b6565b604051601f8301601f19908116603f01168101908282118183101715620002815762000281620000b6565b816040528381526020925086838588010111156200029e57600080fd5b600091505b83821015620002c25785820183015181830184015290820190620002a3565b600093810190920192909252949350505050565b600080600060608486031215620002ec57600080fd5b83516001600160401b03808211156200030457600080fd5b620003128783880162000227565b945060208601519150808211156200032957600080fd5b50620003388682870162000227565b925050604084015160ff811681146200035057600080fd5b809150509250925092565b60805161099662000377600039600061019a01526109966000f3fe6080604052600436106100c25760003560e01c806340c10f191161007f5780639dc29fac116100595780639dc29fac14610230578063a9059cbb14610250578063d0e30db014610270578063dd62ed3e1461027857600080fd5b806340c10f19146101ce57806370a08231146101ee57806395d89b411461021b57600080fd5b806306fdde03146100c7578063095ea7b3146100f257806318160ddd1461012257806323b872dd146101465780632e1a7d4d14610166578063313ce56714610188575b600080fd5b3480156100d357600080fd5b506100dc6102b0565b6040516100e991906107b3565b60405180910390f35b3480156100fe57600080fd5b5061011261010d36600461081d565b61033e565b60405190151581526020016100e9565b34801561012e57600080fd5b5061013860025481565b6040519081526020016100e9565b34801561015257600080fd5b50610112610161366004610847565b6103ab565b34801561017257600080fd5b50610186610181366004610883565b6105cc565b005b34801561019457600080fd5b506101bc7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff90911681526020016100e9565b3480156101da57600080fd5b506101866101e936600461081d565b610607565b3480156101fa57600080fd5b5061013861020936600461089c565b60036020526000908152604090205481565b34801561022757600080fd5b506100dc61069b565b34801561023c57600080fd5b5061018661024b36600461081d565b6106a8565b34801561025c57600080fd5b5061011261026b36600461081d565b610793565b6101866107a7565b34801561028457600080fd5b506101386102933660046108b7565b600460209081526000928352604080842090915290825290205481565b600080546102bd906108ea565b80601f01602080910402602001604051908101604052809291908181526020018280546102e9906108ea565b80156103365780601f1061030b57610100808354040283529160200191610336565b820191906000526020600020905b81548152906001019060200180831161031957829003601f168201915b505050505081565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906103999086815260200190565b60405180910390a35060015b92915050565b6001600160a01b03831660009081526003602052604081205482111561040f5760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742062616c616e636560601b60448201526064015b60405180910390fd5b6001600160a01b038416331480159061044d57506001600160a01b038416600090815260046020908152604080832033845290915290205460001914155b15610512576001600160a01b03841660009081526004602090815260408083203384529091529020548211156104be5760405162461bcd60e51b8152602060048201526016602482015275696e73756666696369656e7420616c6c6f77616e636560501b6044820152606401610406565b6001600160a01b03841660009081526004602090815260408083203384529091529020546104ed90839061093a565b6001600160a01b03851660009081526004602090815260408083203384529091529020555b6001600160a01b03841660009081526003602052604090205461053690839061093a565b6001600160a01b03808616600090815260036020526040808220939093559085168152205461056690839061094d565b6001600160a01b0380851660008181526003602052604090819020939093559151908616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906105ba9086815260200190565b60405180910390a35060019392505050565b6105d633826106a8565b604051339082156108fc029083906000818181858888f19350505050158015610603573d6000803e3d6000fd5b5050565b6001600160a01b03821660009081526003602052604090205461062b90829061094d565b6001600160a01b03831660009081526003602052604090205560025461065290829061094d565b6002556040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b600180546102bd906108ea565b6001600160a01b0382166000908152600360205260409020548111156107075760405162461bcd60e51b8152602060048201526014602482015273696e73756666696369656e742d62616c616e636560601b6044820152606401610406565b6001600160a01b03821660009081526003602052604090205461072b90829061093a565b6001600160a01b03831660009081526003602052604090205560025461075290829061093a565b6002556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200161068f565b60006107a03384846103ab565b9392505050565b6107b13334610607565b565b600060208083528351808285015260005b818110156107e0578581018301518582016040015282016107c4565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461081857600080fd5b919050565b6000806040838503121561083057600080fd5b61083983610801565b946020939093013593505050565b60008060006060848603121561085c57600080fd5b61086584610801565b925061087360208501610801565b9150604084013590509250925092565b60006020828403121561089557600080fd5b5035919050565b6000602082840312156108ae57600080fd5b6107a082610801565b600080604083850312156108ca57600080fd5b6108d383610801565b91506108e160208401610801565b90509250929050565b600181811c908216806108fe57607f821691505b60208210810361091e57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156103a5576103a5610924565b808201808211156103a5576103a561092456fea264697066735822122076d990b405e00069a645dff2b58c9db4a375887f2b42bab91cb75e5435e4e48e64736f6c63430008130033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockERC20> {
    return super.deploy(
      _name,
      _symbol,
      _decimals,
      overrides || {}
    ) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    _name: PromiseOrValue<string>,
    _symbol: PromiseOrValue<string>,
    _decimals: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _decimals,
      overrides || {}
    );
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
