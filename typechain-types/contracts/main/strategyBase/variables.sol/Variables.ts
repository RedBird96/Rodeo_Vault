/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface VariablesInterface extends utils.Interface {
  functions: {
    "MAX_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "MIN_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "PERMISSIBLE_LIMIT()": FunctionFragment;
    "STETH_ADDR()": FunctionFragment;
    "WETH_ADDR()": FunctionFragment;
    "WSTETH_ADDR()": FunctionFragment;
    "availableProtocol(uint8)": FunctionFragment;
    "exchangePrice()": FunctionFragment;
    "executor()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "flashloanHelper()": FunctionFragment;
    "lendingLogic()": FunctionFragment;
    "rebalancer(address)": FunctionFragment;
    "revenue()": FunctionFragment;
    "revenueExchangePrice()": FunctionFragment;
    "revenueRate()": FunctionFragment;
    "safeAggregatedRatio()": FunctionFragment;
    "safeProtocolRatio(uint8)": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SAFE_AGGREGATED_RATIO"
      | "MIN_SAFE_AGGREGATED_RATIO"
      | "PERMISSIBLE_LIMIT"
      | "STETH_ADDR"
      | "WETH_ADDR"
      | "WSTETH_ADDR"
      | "availableProtocol"
      | "exchangePrice"
      | "executor"
      | "feeReceiver"
      | "flashloanHelper"
      | "lendingLogic"
      | "rebalancer"
      | "revenue"
      | "revenueExchangePrice"
      | "revenueRate"
      | "safeAggregatedRatio"
      | "safeProtocolRatio"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMISSIBLE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WSTETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "revenue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revenueExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAggregatedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeProtocolRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMISSIBLE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WSTETH_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rebalancer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revenueExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAggregatedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {};
}

export interface Variables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VariablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    STETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    flashloanHelper(overrides?: CallOverrides): Promise<[string]>;

    lendingLogic(overrides?: CallOverrides): Promise<[string]>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  STETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

  availableProtocol(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  flashloanHelper(overrides?: CallOverrides): Promise<string>;

  lendingLogic(overrides?: CallOverrides): Promise<string>;

  rebalancer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revenue(overrides?: CallOverrides): Promise<BigNumber>;

  revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

  safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  safeProtocolRatio(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    STETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    flashloanHelper(overrides?: CallOverrides): Promise<string>;

    lendingLogic(overrides?: CallOverrides): Promise<string>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    STETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    flashloanHelper(overrides?: CallOverrides): Promise<BigNumber>;

    lendingLogic(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashloanHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revenueExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeAggregatedRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
