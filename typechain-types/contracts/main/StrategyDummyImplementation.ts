/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StrategyDummyImplementationInterface extends utils.Interface {
  functions: {
    "STETH_ADDR()": FunctionFragment;
    "WETH_ADDR()": FunctionFragment;
    "WSTETH_ADDR()": FunctionFragment;
    "availableProtocol(uint8)": FunctionFragment;
    "collectRevenue()": FunctionFragment;
    "deleverage(uint8,uint256,uint256,bytes,uint256,uint256)": FunctionFragment;
    "deleverageAndWithdraw(uint8,uint256,bytes,uint256,bool,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "enterProtocol(uint8)": FunctionFragment;
    "exchangePrice()": FunctionFragment;
    "executor()": FunctionFragment;
    "exitProtocol(uint8)": FunctionFragment;
    "flashloanHelper()": FunctionFragment;
    "getAvailableBorrowsETH(uint8)": FunctionFragment;
    "getAvailableWithdrawsStETH(uint8)": FunctionFragment;
    "getCurrentExchangePrice()": FunctionFragment;
    "getDeleverageAmount(uint256,uint8)": FunctionFragment;
    "getNetAssets()": FunctionFragment;
    "getNetAssetsInfo()": FunctionFragment;
    "getProtocolAccountData(uint8)": FunctionFragment;
    "getProtocolCollateralRatio(uint8)": FunctionFragment;
    "getProtocolLeverageAmount(uint8,bool,uint256)": FunctionFragment;
    "getProtocolNetAssets(uint8)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "initialize(uint256,uint256,uint256[],address[],address,address,address)": FunctionFragment;
    "lendingLogic()": FunctionFragment;
    "leverage(uint8,uint256,uint256,bytes,uint256,uint256)": FunctionFragment;
    "migrate(uint8,uint8,uint256,uint256,uint256)": FunctionFragment;
    "onFlashLoanOne(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onFlashLoanTwo(address,address,uint256,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalancer(address)": FunctionFragment;
    "revenue()": FunctionFragment;
    "revenueExchangePrice()": FunctionFragment;
    "revenueRate()": FunctionFragment;
    "safeAggregatedRatio()": FunctionFragment;
    "safeProtocolRatio(uint8)": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "updateExchangePrice()": FunctionFragment;
    "updateFeeReceiver(address)": FunctionFragment;
    "updateFlashloanHelper(address)": FunctionFragment;
    "updateLendingLogic(address)": FunctionFragment;
    "updateRebalancer(address[],bool[])": FunctionFragment;
    "updateSafeAggregatedRatio(uint256)": FunctionFragment;
    "updateSafeProtocolRatio(uint8[],uint256[])": FunctionFragment;
    "updateWithdrawFeeRate(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawFeeRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "STETH_ADDR"
      | "WETH_ADDR"
      | "WSTETH_ADDR"
      | "availableProtocol"
      | "collectRevenue"
      | "deleverage"
      | "deleverageAndWithdraw"
      | "deposit"
      | "enterProtocol"
      | "exchangePrice"
      | "executor"
      | "exitProtocol"
      | "flashloanHelper"
      | "getAvailableBorrowsETH"
      | "getAvailableWithdrawsStETH"
      | "getCurrentExchangePrice"
      | "getDeleverageAmount"
      | "getNetAssets"
      | "getNetAssetsInfo"
      | "getProtocolAccountData"
      | "getProtocolCollateralRatio"
      | "getProtocolLeverageAmount"
      | "getProtocolNetAssets"
      | "getVersion"
      | "initialize"
      | "lendingLogic"
      | "leverage"
      | "migrate"
      | "onFlashLoanOne"
      | "onFlashLoanTwo"
      | "owner"
      | "rebalancer"
      | "revenue"
      | "revenueExchangePrice"
      | "revenueRate"
      | "safeAggregatedRatio"
      | "safeProtocolRatio"
      | "setVault"
      | "updateExchangePrice"
      | "updateFeeReceiver"
      | "updateFlashloanHelper"
      | "updateLendingLogic"
      | "updateRebalancer"
      | "updateSafeAggregatedRatio"
      | "updateSafeProtocolRatio"
      | "updateWithdrawFeeRate"
      | "vault"
      | "withdraw"
      | "withdrawFeeRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "STETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WSTETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "collectRevenue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleverageAndWithdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "enterProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "exitProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBorrowsETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableWithdrawsStETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeleverageAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssetsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolAccountData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolCollateralRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolLeverageAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolNetAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "lendingLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoanOne",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoanTwo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalancer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "revenue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revenueExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAggregatedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeProtocolRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeReceiver",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanHelper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLendingLogic",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRebalancer",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSafeAggregatedRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSafeProtocolRatio",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawFeeRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "STETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WSTETH_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectRevenue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleverageAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "enterProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBorrowsETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableWithdrawsStETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeleverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssetsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolLeverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoanOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoanTwo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalancer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revenueExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAggregatedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLendingLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRebalancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSafeAggregatedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSafeProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface StrategyDummyImplementation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyDummyImplementationInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    STETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    availableProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    collectRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdraw: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleverageAndWithdraw(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdrawShare: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _isETH: PromiseOrValue<boolean>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enterProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    exitProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    flashloanHelper(overrides?: CallOverrides): Promise<[string]>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice_: BigNumber;
        newRevenue_: BigNumber;
      }
    >;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNetAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNetAssetsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stEthAmount_: BigNumber;
        debtEthAmount_: BigNumber;
      }
    >;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { protocolRatio_: BigNumber; isOK_: boolean }
    >;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isLeverage_: boolean; amount_: BigNumber }
    >;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _revenueRate: PromiseOrValue<BigNumberish>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      _rebalancers: PromiseOrValue<string>[],
      _flashloanHelper: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lendingLogic(overrides?: CallOverrides): Promise<[string]>;

    leverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    migrate(
      _fromProtocolId: PromiseOrValue<BigNumberish>,
      _toProtocolId: PromiseOrValue<BigNumberish>,
      _stAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    onFlashLoanTwo(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalancer(
      _rebalancer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    revenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFeeReceiver(
      _newFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFlashloanHelper(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateLendingLogic(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateRebalancer(
      _rebalancers: PromiseOrValue<string>[],
      _isAllowed: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSafeAggregatedRatio(
      _newSafeAggregatedRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSafeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>[],
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawFeeRate(
      _newWithdrawFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  STETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

  availableProtocol(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  collectRevenue(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleverage(
    _protocolId: PromiseOrValue<BigNumberish>,
    _withdraw: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _swapGetMin: PromiseOrValue<BigNumberish>,
    _flashloanSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleverageAndWithdraw(
    _protocolId: PromiseOrValue<BigNumberish>,
    _withdrawShare: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _swapGetMin: PromiseOrValue<BigNumberish>,
    _isETH: PromiseOrValue<boolean>,
    _flashloanSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _stAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enterProtocol(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  exitProtocol(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  flashloanHelper(overrides?: CallOverrides): Promise<string>;

  getAvailableBorrowsETH(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableWithdrawsStETH(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentExchangePrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      newExchangePrice_: BigNumber;
      newRevenue_: BigNumber;
    }
  >;

  getDeleverageAmount(
    _share: PromiseOrValue<BigNumberish>,
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getNetAssetsInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getProtocolAccountData(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      stEthAmount_: BigNumber;
      debtEthAmount_: BigNumber;
    }
  >;

  getProtocolCollateralRatio(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { protocolRatio_: BigNumber; isOK_: boolean }
  >;

  getProtocolLeverageAmount(
    _protocolId: PromiseOrValue<BigNumberish>,
    _isDepositOrWithdraw: PromiseOrValue<boolean>,
    _depositOrWithdraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, BigNumber] & { isLeverage_: boolean; amount_: BigNumber }
  >;

  getProtocolNetAssets(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  initialize(
    _revenueRate: PromiseOrValue<BigNumberish>,
    _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
    _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
    _rebalancers: PromiseOrValue<string>[],
    _flashloanHelper: PromiseOrValue<string>,
    _lendingLogic: PromiseOrValue<string>,
    _feeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lendingLogic(overrides?: CallOverrides): Promise<string>;

  leverage(
    _protocolId: PromiseOrValue<BigNumberish>,
    _deposit: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _swapGetMin: PromiseOrValue<BigNumberish>,
    _flashloanSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  migrate(
    _fromProtocolId: PromiseOrValue<BigNumberish>,
    _toProtocolId: PromiseOrValue<BigNumberish>,
    _stAmount: PromiseOrValue<BigNumberish>,
    _debtAmount: PromiseOrValue<BigNumberish>,
    _flashloanSelector: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onFlashLoanOne(
    _initiator: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  onFlashLoanTwo(
    _initiator: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalancer(
    _rebalancer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  revenue(overrides?: CallOverrides): Promise<BigNumber>;

  revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

  safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  safeProtocolRatio(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFeeReceiver(
    _newFeeReceiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFlashloanHelper(
    _newLendingLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateLendingLogic(
    _newLendingLogic: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateRebalancer(
    _rebalancers: PromiseOrValue<string>[],
    _isAllowed: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSafeAggregatedRatio(
    _newSafeAggregatedRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSafeProtocolRatio(
    _protocolId: PromiseOrValue<BigNumberish>[],
    _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawFeeRate(
    _newWithdrawFeeRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _stAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    STETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

    availableProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    collectRevenue(overrides?: CallOverrides): Promise<void>;

    deleverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdraw: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleverageAndWithdraw(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdrawShare: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _isETH: PromiseOrValue<boolean>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    enterProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    exitProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    flashloanHelper(overrides?: CallOverrides): Promise<string>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice_: BigNumber;
        newRevenue_: BigNumber;
      }
    >;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssetsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stEthAmount_: BigNumber;
        debtEthAmount_: BigNumber;
      }
    >;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { protocolRatio_: BigNumber; isOK_: boolean }
    >;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isLeverage_: boolean; amount_: BigNumber }
    >;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    initialize(
      _revenueRate: PromiseOrValue<BigNumberish>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      _rebalancers: PromiseOrValue<string>[],
      _flashloanHelper: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lendingLogic(overrides?: CallOverrides): Promise<string>;

    leverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      _fromProtocolId: PromiseOrValue<BigNumberish>,
      _toProtocolId: PromiseOrValue<BigNumberish>,
      _stAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    onFlashLoanTwo(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalancer(
      _rebalancer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice_: BigNumber;
        newRevenue_: BigNumber;
      }
    >;

    updateFeeReceiver(
      _newFeeReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFlashloanHelper(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateLendingLogic(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRebalancer(
      _rebalancers: PromiseOrValue<string>[],
      _isAllowed: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateSafeAggregatedRatio(
      _newSafeAggregatedRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSafeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>[],
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawFeeRate(
      _newWithdrawFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    STETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    availableProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdraw: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleverageAndWithdraw(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdrawShare: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _isETH: PromiseOrValue<boolean>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enterProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    exitProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    flashloanHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssetsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _revenueRate: PromiseOrValue<BigNumberish>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      _rebalancers: PromiseOrValue<string>[],
      _flashloanHelper: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lendingLogic(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    migrate(
      _fromProtocolId: PromiseOrValue<BigNumberish>,
      _toProtocolId: PromiseOrValue<BigNumberish>,
      _stAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    onFlashLoanTwo(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancer(
      _rebalancer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFeeReceiver(
      _newFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFlashloanHelper(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateLendingLogic(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateRebalancer(
      _rebalancers: PromiseOrValue<string>[],
      _isAllowed: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSafeAggregatedRatio(
      _newSafeAggregatedRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSafeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>[],
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateWithdrawFeeRate(
      _newWithdrawFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    STETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectRevenue(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdraw: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleverageAndWithdraw(
      _protocolId: PromiseOrValue<BigNumberish>,
      _withdrawShare: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _isETH: PromiseOrValue<boolean>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enterProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    exitProtocol(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    flashloanHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetAssetsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _revenueRate: PromiseOrValue<BigNumberish>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      _rebalancers: PromiseOrValue<string>[],
      _flashloanHelper: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _feeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lendingLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leverage(
      _protocolId: PromiseOrValue<BigNumberish>,
      _deposit: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _swapGetMin: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      _fromProtocolId: PromiseOrValue<BigNumberish>,
      _toProtocolId: PromiseOrValue<BigNumberish>,
      _stAmount: PromiseOrValue<BigNumberish>,
      _debtAmount: PromiseOrValue<BigNumberish>,
      _flashloanSelector: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    onFlashLoanTwo(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancer(
      _rebalancer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revenueExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeAggregatedRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeReceiver(
      _newFeeReceiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashloanHelper(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateLendingLogic(
      _newLendingLogic: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateRebalancer(
      _rebalancers: PromiseOrValue<string>[],
      _isAllowed: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSafeAggregatedRatio(
      _newSafeAggregatedRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSafeProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>[],
      _safeProtocolRatio: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawFeeRate(
      _newWithdrawFeeRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _stAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
