/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export interface EventsInterface extends utils.Interface {
  functions: {
    "MAX_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "MIN_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "PERMISSIBLE_LIMIT()": FunctionFragment;
    "STETH_ADDR()": FunctionFragment;
    "WETH_ADDR()": FunctionFragment;
    "WSTETH_ADDR()": FunctionFragment;
    "availableProtocol(uint8)": FunctionFragment;
    "exchangePrice()": FunctionFragment;
    "executor()": FunctionFragment;
    "feeReceiver()": FunctionFragment;
    "flashloanHelper()": FunctionFragment;
    "getAvailableBorrowsETH(uint8)": FunctionFragment;
    "getAvailableWithdrawsStETH(uint8)": FunctionFragment;
    "getCurrentExchangePrice()": FunctionFragment;
    "getNetAssets()": FunctionFragment;
    "getNetAssetsInfo()": FunctionFragment;
    "getProtocolAccountData(uint8)": FunctionFragment;
    "getProtocolCollateralRatio(uint8)": FunctionFragment;
    "getProtocolLeverageAmount(uint8,bool,uint256)": FunctionFragment;
    "getProtocolNetAssets(uint8)": FunctionFragment;
    "getProtocolRatio(uint8)": FunctionFragment;
    "getVersion()": FunctionFragment;
    "lendingLogic()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalancer(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revenue()": FunctionFragment;
    "revenueExchangePrice()": FunctionFragment;
    "revenueRate()": FunctionFragment;
    "safeAggregatedRatio()": FunctionFragment;
    "safeProtocolRatio(uint8)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateExchangePrice()": FunctionFragment;
    "vault()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SAFE_AGGREGATED_RATIO"
      | "MIN_SAFE_AGGREGATED_RATIO"
      | "PERMISSIBLE_LIMIT"
      | "STETH_ADDR"
      | "WETH_ADDR"
      | "WSTETH_ADDR"
      | "availableProtocol"
      | "exchangePrice"
      | "executor"
      | "feeReceiver"
      | "flashloanHelper"
      | "getAvailableBorrowsETH"
      | "getAvailableWithdrawsStETH"
      | "getCurrentExchangePrice"
      | "getNetAssets"
      | "getNetAssetsInfo"
      | "getProtocolAccountData"
      | "getProtocolCollateralRatio"
      | "getProtocolLeverageAmount"
      | "getProtocolNetAssets"
      | "getProtocolRatio"
      | "getVersion"
      | "lendingLogic"
      | "owner"
      | "rebalancer"
      | "renounceOwnership"
      | "revenue"
      | "revenueExchangePrice"
      | "revenueRate"
      | "safeAggregatedRatio"
      | "safeProtocolRatio"
      | "transferOwnership"
      | "updateExchangePrice"
      | "vault"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMISSIBLE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "STETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WSTETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "availableProtocol",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "executor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBorrowsETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableWithdrawsStETH",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssetsInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolAccountData",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolCollateralRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolLeverageAmount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolNetAssets",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingLogic",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebalancer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revenue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revenueExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAggregatedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeProtocolRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMISSIBLE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "STETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WSTETH_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "availableProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "executor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBorrowsETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableWithdrawsStETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssetsInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolLeverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lendingLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalancer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revenueExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAggregatedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;

  events: {
    "Deposit(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateExchangePrice(uint256,uint256)": EventFragment;
    "Withdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExchangePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface DepositEventObject {
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface UpdateExchangePriceEventObject {
  newExchangePrice: BigNumber;
  newRevenue: BigNumber;
}
export type UpdateExchangePriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateExchangePriceEventObject
>;

export type UpdateExchangePriceEventFilter =
  TypedEventFilter<UpdateExchangePriceEvent>;

export interface WithdrawEventObject {
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Events extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    STETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    executor(overrides?: CallOverrides): Promise<[string]>;

    feeReceiver(overrides?: CallOverrides): Promise<[string]>;

    flashloanHelper(overrides?: CallOverrides): Promise<[string]>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice: BigNumber;
        newRevenue: BigNumber;
      }
    >;

    getNetAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getNetAssetsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stEthAmount: BigNumber;
        debtEthAmount: BigNumber;
      }
    >;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
    >;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isLeverage: boolean; amount: BigNumber }
    >;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { net: BigNumber }>;

    getProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    getVersion(overrides?: CallOverrides): Promise<[string]>;

    lendingLogic(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  STETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

  availableProtocol(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  executor(overrides?: CallOverrides): Promise<string>;

  feeReceiver(overrides?: CallOverrides): Promise<string>;

  flashloanHelper(overrides?: CallOverrides): Promise<string>;

  getAvailableBorrowsETH(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableWithdrawsStETH(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentExchangePrice(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      newExchangePrice: BigNumber;
      newRevenue: BigNumber;
    }
  >;

  getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getNetAssetsInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

  getProtocolAccountData(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      stEthAmount: BigNumber;
      debtEthAmount: BigNumber;
    }
  >;

  getProtocolCollateralRatio(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
  >;

  getProtocolLeverageAmount(
    _protocolId: PromiseOrValue<BigNumberish>,
    _isDepositOrWithdraw: PromiseOrValue<boolean>,
    _depositOrWithdraw: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { isLeverage: boolean; amount: BigNumber }>;

  getProtocolNetAssets(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProtocolRatio(
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVersion(overrides?: CallOverrides): Promise<string>;

  lendingLogic(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalancer(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revenue(overrides?: CallOverrides): Promise<BigNumber>;

  revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

  safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  safeProtocolRatio(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    STETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<string>;

    feeReceiver(overrides?: CallOverrides): Promise<string>;

    flashloanHelper(overrides?: CallOverrides): Promise<string>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice: BigNumber;
        newRevenue: BigNumber;
      }
    >;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssetsInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber, BigNumber]>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        stEthAmount: BigNumber;
        debtEthAmount: BigNumber;
      }
    >;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
    >;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { isLeverage: boolean; amount: BigNumber }
    >;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<string>;

    lendingLogic(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice: BigNumber;
        newRevenue: BigNumber;
      }
    >;

    vault(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Deposit(uint256)"(amount?: null): DepositEventFilter;
    Deposit(amount?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "UpdateExchangePrice(uint256,uint256)"(
      newExchangePrice?: null,
      newRevenue?: null
    ): UpdateExchangePriceEventFilter;
    UpdateExchangePrice(
      newExchangePrice?: null,
      newRevenue?: null
    ): UpdateExchangePriceEventFilter;

    "Withdraw(uint256)"(amount?: null): WithdrawEventFilter;
    Withdraw(amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    STETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    executor(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    flashloanHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssetsInfo(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVersion(overrides?: CallOverrides): Promise<BigNumber>;

    lendingLogic(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    STETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableProtocol(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashloanHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableBorrowsETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableWithdrawsStETH(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNetAssetsInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolAccountData(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolCollateralRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolLeverageAmount(
      _protocolId: PromiseOrValue<BigNumberish>,
      _isDepositOrWithdraw: PromiseOrValue<boolean>,
      _depositOrWithdraw: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolNetAssets(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolRatio(
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalancer(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revenueExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeAggregatedRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeProtocolRatio(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
