/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface StrategyProxyInterface extends utils.Interface {
  functions: {
    "addImplementation(address,bytes4[])": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "getDummyImplementation()": FunctionFragment;
    "getImplementationSigs(address)": FunctionFragment;
    "getSigsImplementation(bytes4)": FunctionFragment;
    "removeImplementation(address)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDummyImplementation(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addImplementation"
      | "getAdmin"
      | "getDummyImplementation"
      | "getImplementationSigs"
      | "getSigsImplementation"
      | "removeImplementation"
      | "setAdmin"
      | "setDummyImplementation"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addImplementation",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDummyImplementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getImplementationSigs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigsImplementation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDummyImplementation",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDummyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImplementationSigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSigsImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDummyImplementation",
    data: BytesLike
  ): Result;

  events: {
    "removeImplementationLog(address)": EventFragment;
    "setAdminLog(address,address)": EventFragment;
    "setDummyImplementationLog(address,address)": EventFragment;
    "setImplementationLog(address,bytes4[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "removeImplementationLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setAdminLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setDummyImplementationLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setImplementationLog"): EventFragment;
}

export interface removeImplementationLogEventObject {
  implementation_: string;
}
export type removeImplementationLogEvent = TypedEvent<
  [string],
  removeImplementationLogEventObject
>;

export type removeImplementationLogEventFilter =
  TypedEventFilter<removeImplementationLogEvent>;

export interface setAdminLogEventObject {
  oldAdmin_: string;
  newAdmin_: string;
}
export type setAdminLogEvent = TypedEvent<
  [string, string],
  setAdminLogEventObject
>;

export type setAdminLogEventFilter = TypedEventFilter<setAdminLogEvent>;

export interface setDummyImplementationLogEventObject {
  oldDummyImplementation_: string;
  newDummyImplementation_: string;
}
export type setDummyImplementationLogEvent = TypedEvent<
  [string, string],
  setDummyImplementationLogEventObject
>;

export type setDummyImplementationLogEventFilter =
  TypedEventFilter<setDummyImplementationLogEvent>;

export interface setImplementationLogEventObject {
  implementation_: string;
  sigs_: string[];
}
export type setImplementationLogEvent = TypedEvent<
  [string, string[]],
  setImplementationLogEventObject
>;

export type setImplementationLogEventFilter =
  TypedEventFilter<setImplementationLogEvent>;

export interface StrategyProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addImplementation(
      implementation_: PromiseOrValue<string>,
      sigs_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    getDummyImplementation(overrides?: CallOverrides): Promise<[string]>;

    getImplementationSigs(
      impl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getSigsImplementation(
      sig_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDummyImplementation(
      newDummyImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addImplementation(
    implementation_: PromiseOrValue<string>,
    sigs_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  getDummyImplementation(overrides?: CallOverrides): Promise<string>;

  getImplementationSigs(
    impl_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getSigsImplementation(
    sig_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeImplementation(
    implementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    newAdmin_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDummyImplementation(
    newDummyImplementation_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addImplementation(
      implementation_: PromiseOrValue<string>,
      sigs_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    getDummyImplementation(overrides?: CallOverrides): Promise<string>;

    getImplementationSigs(
      impl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getSigsImplementation(
      sig_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDummyImplementation(
      newDummyImplementation_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "removeImplementationLog(address)"(
      implementation_?: null
    ): removeImplementationLogEventFilter;
    removeImplementationLog(
      implementation_?: null
    ): removeImplementationLogEventFilter;

    "setAdminLog(address,address)"(
      oldAdmin_?: null,
      newAdmin_?: null
    ): setAdminLogEventFilter;
    setAdminLog(oldAdmin_?: null, newAdmin_?: null): setAdminLogEventFilter;

    "setDummyImplementationLog(address,address)"(
      oldDummyImplementation_?: null,
      newDummyImplementation_?: null
    ): setDummyImplementationLogEventFilter;
    setDummyImplementationLog(
      oldDummyImplementation_?: null,
      newDummyImplementation_?: null
    ): setDummyImplementationLogEventFilter;

    "setImplementationLog(address,bytes4[])"(
      implementation_?: null,
      sigs_?: null
    ): setImplementationLogEventFilter;
    setImplementationLog(
      implementation_?: null,
      sigs_?: null
    ): setImplementationLogEventFilter;
  };

  estimateGas: {
    addImplementation(
      implementation_: PromiseOrValue<string>,
      sigs_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    getDummyImplementation(overrides?: CallOverrides): Promise<BigNumber>;

    getImplementationSigs(
      impl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSigsImplementation(
      sig_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDummyImplementation(
      newDummyImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addImplementation(
      implementation_: PromiseOrValue<string>,
      sigs_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDummyImplementation(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImplementationSigs(
      impl_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSigsImplementation(
      sig_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeImplementation(
      implementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      newAdmin_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDummyImplementation(
      newDummyImplementation_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
