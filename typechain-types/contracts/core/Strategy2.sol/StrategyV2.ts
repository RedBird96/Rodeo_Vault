/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface StrategyV2Interface extends utils.Interface {
  functions: {
    "AAVE_ORACLE_V3()": FunctionFragment;
    "AAVE_POOL_V3()": FunctionFragment;
    "A_WSTETH_ADDR_AAVEV3()": FunctionFragment;
    "D_WETH_ADDR_AAVEV3()": FunctionFragment;
    "ETH_ADDR()": FunctionFragment;
    "MAX_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "MINIMUM_AMOUNT()": FunctionFragment;
    "MIN_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "PERMISSIBLE_LIMIT()": FunctionFragment;
    "WETH_ADDR()": FunctionFragment;
    "WSTETH_ADDR()": FunctionFragment;
    "__Strategy_init(address,address,address,uint256,uint256)": FunctionFragment;
    "addAdmin(address)": FunctionFragment;
    "deleverage(uint256,uint256,bytes,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "exchangePrice()": FunctionFragment;
    "flashloanHelper()": FunctionFragment;
    "getAssestPrice(address)": FunctionFragment;
    "getAvailableLogicBalance()": FunctionFragment;
    "getNetAssets()": FunctionFragment;
    "getProtocolCollateralRatio()": FunctionFragment;
    "getProtocolNetAssets()": FunctionFragment;
    "getProtocolRatio()": FunctionFragment;
    "lendingLogic()": FunctionFragment;
    "leverage(uint256,uint256,bytes,uint256)": FunctionFragment;
    "logicDepositAmount()": FunctionFragment;
    "logicWithdrawAmount()": FunctionFragment;
    "onFlashLoanOne(address,address,uint256,uint256,bytes)": FunctionFragment;
    "oneInchRouter()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "removeAdmin(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revenue()": FunctionFragment;
    "revenueExchangePrice()": FunctionFragment;
    "revenueRate()": FunctionFragment;
    "safeAggregatedRatio()": FunctionFragment;
    "safeRatio()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateExchangePrice()": FunctionFragment;
    "updateFlashloanHelper(address)": FunctionFragment;
    "updateSafeRatio(uint256,uint256)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AAVE_ORACLE_V3"
      | "AAVE_POOL_V3"
      | "A_WSTETH_ADDR_AAVEV3"
      | "D_WETH_ADDR_AAVEV3"
      | "ETH_ADDR"
      | "MAX_SAFE_AGGREGATED_RATIO"
      | "MINIMUM_AMOUNT"
      | "MIN_SAFE_AGGREGATED_RATIO"
      | "PERMISSIBLE_LIMIT"
      | "WETH_ADDR"
      | "WSTETH_ADDR"
      | "__Strategy_init"
      | "addAdmin"
      | "deleverage"
      | "deposit"
      | "exchangePrice"
      | "flashloanHelper"
      | "getAssestPrice"
      | "getAvailableLogicBalance"
      | "getNetAssets"
      | "getProtocolCollateralRatio"
      | "getProtocolNetAssets"
      | "getProtocolRatio"
      | "lendingLogic"
      | "leverage"
      | "logicDepositAmount"
      | "logicWithdrawAmount"
      | "onFlashLoanOne"
      | "oneInchRouter"
      | "owner"
      | "paused"
      | "proxiableUUID"
      | "removeAdmin"
      | "renounceOwnership"
      | "revenue"
      | "revenueExchangePrice"
      | "revenueRate"
      | "safeAggregatedRatio"
      | "safeRatio"
      | "transferOwnership"
      | "updateExchangePrice"
      | "updateFlashloanHelper"
      | "updateSafeRatio"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "vault"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AAVE_ORACLE_V3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AAVE_POOL_V3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "A_WSTETH_ADDR_AAVEV3",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "D_WETH_ADDR_AAVEV3",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMISSIBLE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WSTETH_ADDR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__Strategy_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deleverage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "flashloanHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssestPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableLogicBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolCollateralRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolNetAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lendingLogic",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "leverage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "logicDepositAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "logicWithdrawAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onFlashLoanOne",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "oneInchRouter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "revenue", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revenueExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revenueRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeAggregatedRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "safeRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateFlashloanHelper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSafeRatio",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "AAVE_ORACLE_V3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AAVE_POOL_V3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "A_WSTETH_ADDR_AAVEV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "D_WETH_ADDR_AAVEV3",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMISSIBLE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WSTETH_ADDR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__Strategy_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "flashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableLogicBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolCollateralRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lendingLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "logicDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logicWithdrawAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onFlashLoanOne",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oneInchRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revenue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revenueExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revenueRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAggregatedRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safeRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFlashloanHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSafeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Deleverage(uint256,uint256)": EventFragment;
    "Deposit(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Leverage(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "UpdateExchangePrice(uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "Withdraw(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deleverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Leverage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateExchangePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DeleverageEventObject {
  repayAmount: BigNumber;
  withdrawAmount: BigNumber;
}
export type DeleverageEvent = TypedEvent<
  [BigNumber, BigNumber],
  DeleverageEventObject
>;

export type DeleverageEventFilter = TypedEventFilter<DeleverageEvent>;

export interface DepositEventObject {
  _amount: BigNumber;
}
export type DepositEvent = TypedEvent<[BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LeverageEventObject {
  debitAmount: BigNumber;
  borrowAmount: BigNumber;
}
export type LeverageEvent = TypedEvent<
  [BigNumber, BigNumber],
  LeverageEventObject
>;

export type LeverageEventFilter = TypedEventFilter<LeverageEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UpdateExchangePriceEventObject {
  newExchangePrice: BigNumber;
  newRevenue: BigNumber;
}
export type UpdateExchangePriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdateExchangePriceEventObject
>;

export type UpdateExchangePriceEventFilter =
  TypedEventFilter<UpdateExchangePriceEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WithdrawEventObject {
  _amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<[BigNumber], WithdrawEventObject>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface StrategyV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StrategyV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AAVE_ORACLE_V3(overrides?: CallOverrides): Promise<[string]>;

    AAVE_POOL_V3(overrides?: CallOverrides): Promise<[string]>;

    A_WSTETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<[string]>;

    D_WETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<[string]>;

    ETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    __Strategy_init(
      _vault: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _flashloanHelper: PromiseOrValue<string>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleverage(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    flashloanHelper(overrides?: CallOverrides): Promise<[string]>;

    getAssestPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    getAvailableLogicBalance(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    getNetAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProtocolCollateralRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
    >;

    getProtocolNetAssets(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { net: BigNumber }>;

    getProtocolRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { ratio: BigNumber }>;

    lendingLogic(overrides?: CallOverrides): Promise<[string]>;

    leverage(
      _stETHDepositAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    logicDepositAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    logicWithdrawAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    oneInchRouter(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revenue(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    revenueRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    safeRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFlashloanHelper(
      _newFlashloanHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateSafeRatio(
      _safeAggregatorRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AAVE_ORACLE_V3(overrides?: CallOverrides): Promise<string>;

  AAVE_POOL_V3(overrides?: CallOverrides): Promise<string>;

  A_WSTETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<string>;

  D_WETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<string>;

  ETH_ADDR(overrides?: CallOverrides): Promise<string>;

  MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

  __Strategy_init(
    _vault: PromiseOrValue<string>,
    _lendingLogic: PromiseOrValue<string>,
    _flashloanHelper: PromiseOrValue<string>,
    _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
    _safeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleverage(
    _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
    _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _minimumAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  flashloanHelper(overrides?: CallOverrides): Promise<string>;

  getAssestPrice(
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolCollateralRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
  >;

  getProtocolNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getProtocolRatio(overrides?: CallOverrides): Promise<BigNumber>;

  lendingLogic(overrides?: CallOverrides): Promise<string>;

  leverage(
    _stETHDepositAmount: PromiseOrValue<BigNumberish>,
    _wEthDebtAmount: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _minimumAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  logicDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

  logicWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

  onFlashLoanOne(
    _initiator: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _fee: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  oneInchRouter(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  removeAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revenue(overrides?: CallOverrides): Promise<BigNumber>;

  revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

  safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

  safeRatio(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateExchangePrice(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFlashloanHelper(
    _newFlashloanHelper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateSafeRatio(
    _safeAggregatorRatio: PromiseOrValue<BigNumberish>,
    _safeRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AAVE_ORACLE_V3(overrides?: CallOverrides): Promise<string>;

    AAVE_POOL_V3(overrides?: CallOverrides): Promise<string>;

    A_WSTETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<string>;

    D_WETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<string>;

    ETH_ADDR(overrides?: CallOverrides): Promise<string>;

    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

    __Strategy_init(
      _vault: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _flashloanHelper: PromiseOrValue<string>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleverage(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    flashloanHelper(overrides?: CallOverrides): Promise<string>;

    getAssestPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolCollateralRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { collateralRatio: BigNumber; isOK: boolean }
    >;

    getProtocolNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lendingLogic(overrides?: CallOverrides): Promise<string>;

    leverage(
      _stETHDepositAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    logicDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    logicWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    oneInchRouter(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateExchangePrice(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        newExchangePrice: BigNumber;
        newRevenue: BigNumber;
      }
    >;

    updateFlashloanHelper(
      _newFlashloanHelper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateSafeRatio(
      _safeAggregatorRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Deleverage(uint256,uint256)"(
      repayAmount?: null,
      withdrawAmount?: null
    ): DeleverageEventFilter;
    Deleverage(
      repayAmount?: null,
      withdrawAmount?: null
    ): DeleverageEventFilter;

    "Deposit(uint256)"(_amount?: null): DepositEventFilter;
    Deposit(_amount?: null): DepositEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Leverage(uint256,uint256)"(
      debitAmount?: null,
      borrowAmount?: null
    ): LeverageEventFilter;
    Leverage(debitAmount?: null, borrowAmount?: null): LeverageEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "UpdateExchangePrice(uint256,uint256)"(
      newExchangePrice?: null,
      newRevenue?: null
    ): UpdateExchangePriceEventFilter;
    UpdateExchangePrice(
      newExchangePrice?: null,
      newRevenue?: null
    ): UpdateExchangePriceEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "Withdraw(uint256)"(_amount?: null): WithdrawEventFilter;
    Withdraw(_amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    AAVE_ORACLE_V3(overrides?: CallOverrides): Promise<BigNumber>;

    AAVE_POOL_V3(overrides?: CallOverrides): Promise<BigNumber>;

    A_WSTETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<BigNumber>;

    D_WETH_ADDR_AAVEV3(overrides?: CallOverrides): Promise<BigNumber>;

    ETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    __Strategy_init(
      _vault: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _flashloanHelper: PromiseOrValue<string>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleverage(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    flashloanHelper(overrides?: CallOverrides): Promise<BigNumber>;

    getAssestPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolCollateralRatio(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolRatio(overrides?: CallOverrides): Promise<BigNumber>;

    lendingLogic(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(
      _stETHDepositAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    logicDepositAmount(overrides?: CallOverrides): Promise<BigNumber>;

    logicWithdrawAmount(overrides?: CallOverrides): Promise<BigNumber>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    oneInchRouter(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revenue(overrides?: CallOverrides): Promise<BigNumber>;

    revenueExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    revenueRate(overrides?: CallOverrides): Promise<BigNumber>;

    safeAggregatedRatio(overrides?: CallOverrides): Promise<BigNumber>;

    safeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFlashloanHelper(
      _newFlashloanHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateSafeRatio(
      _safeAggregatorRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE_ORACLE_V3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    AAVE_POOL_V3(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    A_WSTETH_ADDR_AAVEV3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    D_WETH_ADDR_AAVEV3(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __Strategy_init(
      _vault: PromiseOrValue<string>,
      _lendingLogic: PromiseOrValue<string>,
      _flashloanHelper: PromiseOrValue<string>,
      _safeAggregatedRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleverage(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    flashloanHelper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssestPrice(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAvailableLogicBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolCollateralRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolNetAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProtocolRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lendingLogic(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leverage(
      _stETHDepositAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    logicDepositAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logicWithdrawAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onFlashLoanOne(
      _initiator: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _fee: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    oneInchRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revenue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revenueExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    revenueRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    safeAggregatedRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateExchangePrice(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFlashloanHelper(
      _newFlashloanHelper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateSafeRatio(
      _safeAggregatorRatio: PromiseOrValue<BigNumberish>,
      _safeRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
