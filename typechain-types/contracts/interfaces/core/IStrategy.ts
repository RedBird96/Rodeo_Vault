/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IStrategyInterface extends utils.Interface {
  functions: {
    "deleverageAndWithdraw(uint256,uint256,bytes,uint256)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "exchangePrice()": FunctionFragment;
    "getAvailableLogicBalance()": FunctionFragment;
    "getCurrentExchangePrice()": FunctionFragment;
    "getDeleverageAmount(uint256,uint8)": FunctionFragment;
    "getNetAssets()": FunctionFragment;
    "initialize(bytes,uint256,address[])": FunctionFragment;
    "owner()": FunctionFragment;
    "setVault(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdrawFeeRate()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "deleverageAndWithdraw"
      | "deposit"
      | "exchangePrice"
      | "getAvailableLogicBalance"
      | "getCurrentExchangePrice"
      | "getDeleverageAmount"
      | "getNetAssets"
      | "initialize"
      | "owner"
      | "setVault"
      | "vault"
      | "withdraw"
      | "withdrawFeeRate"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deleverageAndWithdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableLogicBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentExchangePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDeleverageAmount",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNetAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeeRate",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "deleverageAndWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableLogicBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentExchangePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeleverageAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeeRate",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    deleverageAndWithdraw(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAvailableLogicBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNetAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    initialize(
      _initialization: PromiseOrValue<BytesLike>,
      _poolId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  deleverageAndWithdraw(
    _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
    _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
    _swapData: PromiseOrValue<BytesLike>,
    _minimumAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentExchangePrice(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDeleverageAmount(
    _share: PromiseOrValue<BigNumberish>,
    _protocolId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    _initialization: PromiseOrValue<BytesLike>,
    _poolId: PromiseOrValue<BigNumberish>,
    whiteList: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setVault(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vault(overrides?: CallOverrides): Promise<string>;

  withdraw(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    deleverageAndWithdraw(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initialization: PromiseOrValue<BytesLike>,
      _poolId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vault(overrides?: CallOverrides): Promise<string>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    deleverageAndWithdraw(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    exchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableLogicBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentExchangePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNetAssets(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _initialization: PromiseOrValue<BytesLike>,
      _poolId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    deleverageAndWithdraw(
      _stETHWithdrawAmount: PromiseOrValue<BigNumberish>,
      _wEthDebtDeleverageAmount: PromiseOrValue<BigNumberish>,
      _swapData: PromiseOrValue<BytesLike>,
      _minimumAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    exchangePrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableLogicBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentExchangePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDeleverageAmount(
      _share: PromiseOrValue<BigNumberish>,
      _protocolId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNetAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _initialization: PromiseOrValue<BytesLike>,
      _poolId: PromiseOrValue<BigNumberish>,
      whiteList: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setVault(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
