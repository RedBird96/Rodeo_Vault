/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IMorphoAaveLensInterface extends utils.Interface {
  functions: {
    "getUserBalanceStates(address)": FunctionFragment;
    "getUserLiquidityDataForAsset(address,address,address)": FunctionFragment;
    "getUserMaxCapacitiesForAsset(address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getUserBalanceStates"
      | "getUserLiquidityDataForAsset"
      | "getUserMaxCapacitiesForAsset"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getUserBalanceStates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserLiquidityDataForAsset",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserMaxCapacitiesForAsset",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "getUserBalanceStates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserLiquidityDataForAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserMaxCapacitiesForAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMorphoAaveLens extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMorphoAaveLensInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getUserBalanceStates(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralEth: BigNumber;
        borrowableEth: BigNumber;
        maxDebtEth: BigNumber;
        debtEth: BigNumber;
      }
    >;

    getUserLiquidityDataForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        decimals: BigNumber;
        tokenUnit: BigNumber;
        liquidationThreshold: BigNumber;
        ltv: BigNumber;
        underlyingPrice: BigNumber;
        collateralEth: BigNumber;
        debtEth: BigNumber;
      }
    >;

    getUserMaxCapacitiesForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;
  };

  getUserBalanceStates(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      collateralEth: BigNumber;
      borrowableEth: BigNumber;
      maxDebtEth: BigNumber;
      debtEth: BigNumber;
    }
  >;

  getUserLiquidityDataForAsset(
    _user: PromiseOrValue<string>,
    _poolToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      decimals: BigNumber;
      tokenUnit: BigNumber;
      liquidationThreshold: BigNumber;
      ltv: BigNumber;
      underlyingPrice: BigNumber;
      collateralEth: BigNumber;
      debtEth: BigNumber;
    }
  >;

  getUserMaxCapacitiesForAsset(
    _user: PromiseOrValue<string>,
    _poolToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { withdrawable: BigNumber; borrowable: BigNumber }
  >;

  callStatic: {
    getUserBalanceStates(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        collateralEth: BigNumber;
        borrowableEth: BigNumber;
        maxDebtEth: BigNumber;
        debtEth: BigNumber;
      }
    >;

    getUserLiquidityDataForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        decimals: BigNumber;
        tokenUnit: BigNumber;
        liquidationThreshold: BigNumber;
        ltv: BigNumber;
        underlyingPrice: BigNumber;
        collateralEth: BigNumber;
        debtEth: BigNumber;
      }
    >;

    getUserMaxCapacitiesForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        withdrawable: BigNumber;
        borrowable: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    getUserBalanceStates(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserLiquidityDataForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserMaxCapacitiesForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getUserBalanceStates(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserLiquidityDataForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      _oracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserMaxCapacitiesForAsset(
      _user: PromiseOrValue<string>,
      _poolToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
