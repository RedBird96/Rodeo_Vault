/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IMorphoAaveV2 {
  export type BorrowBalanceStruct = {
    inP2P: PromiseOrValue<BigNumberish>;
    onPool: PromiseOrValue<BigNumberish>;
  };

  export type BorrowBalanceStructOutput = [BigNumber, BigNumber] & {
    inP2P: BigNumber;
    onPool: BigNumber;
  };

  export type PoolIndexesStruct = {
    lastUpdateTimestamp: PromiseOrValue<BigNumberish>;
    poolSupplyIndex: PromiseOrValue<BigNumberish>;
    poolBorrowIndex: PromiseOrValue<BigNumberish>;
  };

  export type PoolIndexesStructOutput = [number, BigNumber, BigNumber] & {
    lastUpdateTimestamp: number;
    poolSupplyIndex: BigNumber;
    poolBorrowIndex: BigNumber;
  };

  export type SupplyBalanceStruct = {
    inP2P: PromiseOrValue<BigNumberish>;
    onPool: PromiseOrValue<BigNumberish>;
  };

  export type SupplyBalanceStructOutput = [BigNumber, BigNumber] & {
    inP2P: BigNumber;
    onPool: BigNumber;
  };
}

export interface IMorphoAaveV2Interface extends utils.Interface {
  functions: {
    "borrow(address,uint256)": FunctionFragment;
    "borrow(address,uint256,uint256)": FunctionFragment;
    "borrowBalanceInOf(address,address)": FunctionFragment;
    "claimRewards(address[],bool)": FunctionFragment;
    "liquidate(address,address,address,uint256)": FunctionFragment;
    "p2pBorrowIndex(address)": FunctionFragment;
    "p2pSupplyIndex(address)": FunctionFragment;
    "poolIndexes(address)": FunctionFragment;
    "repay(address,address,uint256)": FunctionFragment;
    "repay(address,uint256)": FunctionFragment;
    "supply(address,address,uint256)": FunctionFragment;
    "supply(address,uint256)": FunctionFragment;
    "supply(address,address,uint256,uint256)": FunctionFragment;
    "supplyBalanceInOf(address,address)": FunctionFragment;
    "withdraw(address,uint256,address)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrow(address,uint256)"
      | "borrow(address,uint256,uint256)"
      | "borrowBalanceInOf"
      | "claimRewards"
      | "liquidate"
      | "p2pBorrowIndex"
      | "p2pSupplyIndex"
      | "poolIndexes"
      | "repay(address,address,uint256)"
      | "repay(address,uint256)"
      | "supply(address,address,uint256)"
      | "supply(address,uint256)"
      | "supply(address,address,uint256,uint256)"
      | "supplyBalanceInOf"
      | "withdraw(address,uint256,address)"
      | "withdraw(address,uint256)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrow(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow(address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowBalanceInOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "p2pBorrowIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "p2pSupplyIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolIndexes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supply(address,address,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supplyBalanceInOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrow(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrow(address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "p2pBorrowIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "p2pSupplyIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolIndexes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repay(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repay(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supply(address,address,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supplyBalanceInOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IMorphoAaveV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMorphoAaveV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "borrow(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "borrow(address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMorphoAaveV2.BorrowBalanceStructOutput]>;

    claimRewards(
      _assets: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    liquidate(
      _poolTokenBorrowed: PromiseOrValue<string>,
      _poolTokenCollateral: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    p2pBorrowIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    p2pSupplyIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    poolIndexes(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMorphoAaveV2.PoolIndexesStructOutput]>;

    "repay(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "repay(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "supply(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "supply(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "supply(address,address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supplyBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IMorphoAaveV2.SupplyBalanceStructOutput]>;

    "withdraw(address,uint256,address)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "borrow(address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "borrow(address,uint256,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _maxGasForMatching: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowBalanceInOf(
    cToken: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMorphoAaveV2.BorrowBalanceStructOutput>;

  claimRewards(
    _assets: PromiseOrValue<string>[],
    _tradeForMorphoToken: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  liquidate(
    _poolTokenBorrowed: PromiseOrValue<string>,
    _poolTokenCollateral: PromiseOrValue<string>,
    _borrower: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  p2pBorrowIndex(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  p2pSupplyIndex(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolIndexes(
    cToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMorphoAaveV2.PoolIndexesStructOutput>;

  "repay(address,address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "repay(address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "supply(address,address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "supply(address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "supply(address,address,uint256,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _onBehalf: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _maxGasForMatching: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supplyBalanceInOf(
    cToken: PromiseOrValue<string>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IMorphoAaveV2.SupplyBalanceStructOutput>;

  "withdraw(address,uint256,address)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _receiver: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    _poolToken: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "borrow(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "borrow(address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMorphoAaveV2.BorrowBalanceStructOutput>;

    claimRewards(
      _assets: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      _poolTokenBorrowed: PromiseOrValue<string>,
      _poolTokenCollateral: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    p2pBorrowIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    p2pSupplyIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIndexes(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMorphoAaveV2.PoolIndexesStructOutput>;

    "repay(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "repay(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "supply(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "supply(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "supply(address,address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supplyBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IMorphoAaveV2.SupplyBalanceStructOutput>;

    "withdraw(address,uint256,address)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "borrow(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "borrow(address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimRewards(
      _assets: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    liquidate(
      _poolTokenBorrowed: PromiseOrValue<string>,
      _poolTokenCollateral: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    p2pBorrowIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    p2pSupplyIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolIndexes(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "repay(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "repay(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "supply(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "supply(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "supply(address,address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supplyBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "borrow(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "borrow(address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimRewards(
      _assets: PromiseOrValue<string>[],
      _tradeForMorphoToken: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    liquidate(
      _poolTokenBorrowed: PromiseOrValue<string>,
      _poolTokenCollateral: PromiseOrValue<string>,
      _borrower: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    p2pBorrowIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    p2pSupplyIndex(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolIndexes(
      cToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "repay(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "repay(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "supply(address,address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "supply(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "supply(address,address,uint256,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _onBehalf: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _maxGasForMatching: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supplyBalanceInOf(
      cToken: PromiseOrValue<string>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _receiver: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      _poolToken: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
