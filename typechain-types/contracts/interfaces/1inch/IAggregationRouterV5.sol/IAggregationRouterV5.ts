/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IAggregationRouterV5 {
  export type SwapDescriptionStruct = {
    srcToken: PromiseOrValue<string>;
    dstToken: PromiseOrValue<string>;
    srcReceiver: PromiseOrValue<string>;
    dstReceiver: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    minReturnAmount: PromiseOrValue<BigNumberish>;
    flags: PromiseOrValue<BigNumberish>;
  };

  export type SwapDescriptionStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    srcToken: string;
    dstToken: string;
    srcReceiver: string;
    dstReceiver: string;
    amount: BigNumber;
    minReturnAmount: BigNumber;
    flags: BigNumber;
  };
}

export interface IAggregationRouterV5Interface extends utils.Interface {
  functions: {
    "swap(address,(address,address,address,address,uint256,uint256,uint256),bytes,bytes)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "swap"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "swap",
    values: [
      PromiseOrValue<string>,
      IAggregationRouterV5.SwapDescriptionStruct,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;

  events: {};
}

export interface IAggregationRouterV5 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAggregationRouterV5Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    swap(
      executor: PromiseOrValue<string>,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  swap(
    executor: PromiseOrValue<string>,
    desc: IAggregationRouterV5.SwapDescriptionStruct,
    permit: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    swap(
      executor: PromiseOrValue<string>,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        returnAmount: BigNumber;
        spentAmount: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    swap(
      executor: PromiseOrValue<string>,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    swap(
      executor: PromiseOrValue<string>,
      desc: IAggregationRouterV5.SwapDescriptionStruct,
      permit: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
