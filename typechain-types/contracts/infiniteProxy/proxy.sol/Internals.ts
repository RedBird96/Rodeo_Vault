/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface InternalsInterface extends utils.Interface {
  functions: {};

  events: {
    "removeImplementationLog(address)": EventFragment;
    "setAdminLog(address,address)": EventFragment;
    "setDummyImplementationLog(address,address)": EventFragment;
    "setImplementationLog(address,bytes4[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "removeImplementationLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setAdminLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setDummyImplementationLog"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "setImplementationLog"): EventFragment;
}

export interface removeImplementationLogEventObject {
  implementation_: string;
}
export type removeImplementationLogEvent = TypedEvent<
  [string],
  removeImplementationLogEventObject
>;

export type removeImplementationLogEventFilter =
  TypedEventFilter<removeImplementationLogEvent>;

export interface setAdminLogEventObject {
  oldAdmin_: string;
  newAdmin_: string;
}
export type setAdminLogEvent = TypedEvent<
  [string, string],
  setAdminLogEventObject
>;

export type setAdminLogEventFilter = TypedEventFilter<setAdminLogEvent>;

export interface setDummyImplementationLogEventObject {
  oldDummyImplementation_: string;
  newDummyImplementation_: string;
}
export type setDummyImplementationLogEvent = TypedEvent<
  [string, string],
  setDummyImplementationLogEventObject
>;

export type setDummyImplementationLogEventFilter =
  TypedEventFilter<setDummyImplementationLogEvent>;

export interface setImplementationLogEventObject {
  implementation_: string;
  sigs_: string[];
}
export type setImplementationLogEvent = TypedEvent<
  [string, string[]],
  setImplementationLogEventObject
>;

export type setImplementationLogEventFilter =
  TypedEventFilter<setImplementationLogEvent>;

export interface Internals extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InternalsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "removeImplementationLog(address)"(
      implementation_?: null
    ): removeImplementationLogEventFilter;
    removeImplementationLog(
      implementation_?: null
    ): removeImplementationLogEventFilter;

    "setAdminLog(address,address)"(
      oldAdmin_?: null,
      newAdmin_?: null
    ): setAdminLogEventFilter;
    setAdminLog(oldAdmin_?: null, newAdmin_?: null): setAdminLogEventFilter;

    "setDummyImplementationLog(address,address)"(
      oldDummyImplementation_?: null,
      newDummyImplementation_?: null
    ): setDummyImplementationLogEventFilter;
    setDummyImplementationLog(
      oldDummyImplementation_?: null,
      newDummyImplementation_?: null
    ): setDummyImplementationLogEventFilter;

    "setImplementationLog(address,bytes4[])"(
      implementation_?: null,
      sigs_?: null
    ): setImplementationLogEventFilter;
    setImplementationLog(
      implementation_?: null,
      sigs_?: null
    ): setImplementationLogEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
