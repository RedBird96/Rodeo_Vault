/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../common";

export interface ConstantsInterface extends utils.Interface {
  functions: {
    "MAX_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "MINIMUM_AMOUNT()": FunctionFragment;
    "MIN_SAFE_AGGREGATED_RATIO()": FunctionFragment;
    "PERMISSIBLE_LIMIT()": FunctionFragment;
    "WETH_ADDR()": FunctionFragment;
    "WSTETH_ADDR()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SAFE_AGGREGATED_RATIO"
      | "MINIMUM_AMOUNT"
      | "MIN_SAFE_AGGREGATED_RATIO"
      | "PERMISSIBLE_LIMIT"
      | "WETH_ADDR"
      | "WSTETH_ADDR"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMISSIBLE_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WETH_ADDR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WSTETH_ADDR",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SAFE_AGGREGATED_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMISSIBLE_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WETH_ADDR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WSTETH_ADDR",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Constants extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConstantsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    WETH_ADDR(overrides?: CallOverrides): Promise<[string]>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

  PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  WETH_ADDR(overrides?: CallOverrides): Promise<string>;

  WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<string>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    MAX_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_SAFE_AGGREGATED_RATIO(overrides?: CallOverrides): Promise<BigNumber>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    WETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MIN_SAFE_AGGREGATED_RATIO(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMISSIBLE_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WSTETH_ADDR(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
